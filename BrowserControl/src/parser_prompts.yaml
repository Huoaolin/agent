# prompts.yaml
recognize_intent: |
  Analyze the following user input to determine the primary intent:
  '{user_input}'
  The intent should be one of:
  - "text": The user wants to extract textual information (e.g., prices, descriptions, details).
  - "image": The user wants to extract images (e.g., pictures, photos, visual content).
  - "other": The user wants other types of information (e.g., files, screenshots, or unclear intent).
  Guidelines:
  - Look for keywords like "图片", "照片", "外观" to indicate "image" intent.
  - Look for keywords like "价格", "详情", "信息" or lack of image-related terms to indicate "text" intent.
  - If the intent is ambiguous or involves non-text/non-image results (e.g., "下载文件"), return "other".
  Return the result as a JSON object with a single key "intent" containing the determined intent as a string.
  Example output: {{"intent": "text"}}

parse_text_task: |
  Parse the following user input into a list of actionable steps for a web browsing agent, with the intent to extract textual information:
  '{user_input}'
  Each step should be a JSON object with:
  - "action": one of ["open_page", "search", "click_element", "extract_text", "done"]
  - "value": relevant data (e.g., URL for "open_page", query for "search", text subject for "extract_text")
  - "type": "text" for "extract_text", None otherwise
  - "sub_goal": a string describing the sub-goal (e.g., "access website", "search for info", "find specific text")
  Guidelines:
  - Default to Baidu ('https://www.baidu.com') or Taobao ('https://www.taobao.com') unless specified.
  - Break complex tasks into logical steps (e.g., "open_page" then "search" then "extract_text").
  - For "latest" or "recent" queries, use "search" followed by "extract_text" with the subject as "value".
  - Set "value" in "extract_text" as the text to extract (e.g., "price of Xiaomi SU7"), not a selector.
  - Avoid redundant "search" steps; one "search" is enough before extraction.
  - End with "extract_text" to fulfill the text intent.
  Return the list in JSON format.

parse_image_task: |
  Parse the following user input into a list of exactly three actionable steps for a web browsing agent, with the intent to extract images:
  '{user_input}'
  Each step must be a JSON object containing:
  - "action": one of ["open_page", "search", "extract_image", "done"]
  - "value": relevant data (e.g., URL for "open_page", query for "search", image subject for "extract_image")
  - "type": "image" for "extract_image", None otherwise
  - "sub_goal": a string describing the sub-goal (e.g., "access image search engine", "search for images", "extract target image")
  Guidelines:
  - The list must contain exactly three steps with the following strict sequence:
    1. First step: Must be "open_page" to access an image search engine.
       - Use 'https://image.baidu.com' as the default unless a specific website is mentioned (e.g., "在淘宝上" implies 'https://www.taobao.com').
    2. Second step: Must be "search", and there must be exactly one "search" step in the list.
       - The query must combine the subject from the input and an image-related term (e.g., "小米汽车SU7 图片") to locate image content.
    3. Third step: Must be "extract_image" to download or extract the image from the search results.
       - The "value" must be the subject of the image to extract (e.g., "小米汽车SU7的图片").
  - Do not deviate from this sequence: "open_page" → "search" → "extract_image". No additional steps or repeated "search" are allowed.
  - The list must end with "extract_image" to complete the image extract task.
  Return the list in JSON format.
  Example:
  Input: "找小米汽车SU7的图片"
  Output:
  [
    {{"action": "open_page", "value": "https://image.baidu.com", "type": null, "sub_goal": "access image search engine"}},
    {{"action": "search", "value": "小米汽车SU7 图片", "type": null, "sub_goal": "search for images"}},
    {{"action": "extract_image", "value": "小米汽车SU7的图片", "type": "image", "sub_goal": "extract target image"}}
  ]

parse_other_task: |
  Parse the following user input into a list of actionable steps for a web browsing agent, with the intent to extract other information (e.g., files, screenshots):
  '{user_input}'
  Each step should be a JSON object with:
  - "action": one of ["open_page", "search", "click_element", "take_screenshot", "download_file", "done"]
  - "value": relevant data (e.g., URL for "open_page", query for "search", file subject for "download_file")
  - "type": "image" for "take_screenshot", "file" for "download_file", None otherwise
  - "sub_goal": a string describing the sub_goal (e.g., "access website", "search for file", "capture page")
  Guidelines:
  - Default to Baidu ('https://www.baidu.com') or Taobao ('https://www.taobao.com') unless specified.
  - Break complex tasks into logical steps (e.g., "open_page" then "search" then "download_file").
  - Use "take_screenshot" for visual capture, "download_file" for file downloads.
  - Avoid redundant "search" steps; one "search" is enough before extraction.
  - End with an appropriate action based on the input (e.g., "take_screenshot", "download_file").
  Return the list in JSON format.

evaluate_text_task: |
  Given the current refined state: '{current_state}...'
  and the current task: {current_task},
  evaluate if the current state satisfies the sub-goal of the text extraction task').
  - Satisfaction requires that the current state contains textual information reasonably related to the task's intent (e.g., the topic or subject matter of '{current_task}' aligns with the state).
  - Focus on textual content such as prices, descriptions, or details; do not enforce strict keyword matching, but ensure the content logically addresses the task's goal based on context.
  - Examples of satisfaction:
    - If "value" is "price of Xiaomi SU7", the state should contain a price (e.g., "¥200,000").
    - If "value" is "description of Xiaomi SU7", the state should contain relevant descriptive text.
  Return a JSON object with:
  - "satisfied": boolean (true if the sub-goal is satisfied)
  - "next_tasks": list of tasks (empty if satisfied; if not satisfied, include "find_most_relevant_link" and "open_page" tasks)
  Each task in "next_tasks" should have:
  - "action": "find_most_relevant_link" or "open_page"
  - "value": relevant data (e.g., query for find_most_relevant_link; placeholder "{{relevant_url}}" for open_page)
  - "type": "text"
  - "sub_goal": sub-goal description aligned with the current task
  If the current state lacks sufficient textual information (e.g., "未找到相关信息" or empty), suggest exploring related pages using "find_most_relevant_link".
  Ensure the response aligns with the text extraction intent and avoids unrelated suggestions.

evaluate_image_task: |
  Given the current refined state: '{current_state}...'
  and the current task: {current_task},
  evaluate if the current state satisfies the sub-goal of the image-related task.
  - Satisfaction requires that the current state indicates a successful image retrieval or download (e.g., a file path, URL, or confirmation of an image related to '{current_task}').
  - Focus on whether the state confirms the presence or acquisition of an image; textual descriptions alone are insufficient unless they explicitly confirm an image result.
  - Examples of satisfaction:
    - If "value" is "小米汽车SU7的图片", the state should be a file path (e.g., "/path/to/image.jpg") or a URL pointing to an image.
    - If "action" is "download_image", the state should confirm the download (e.g., "Image downloaded: /path/to/file").
  Return a JSON object with:
  - "satisfied": boolean (true if the sub-goal is satisfied)
  - "next_tasks": list of tasks (empty if satisfied; if not satisfied, include "find_most_relevant_link" and "open_page" tasks)
  Each task in "next_tasks" should have:
  - "action": "find_most_relevant_link" or "open_page"
  - "value": relevant data (e.g., query for find_most_relevant_link; placeholder "{{relevant_url}}" for open_page)
  - "type": "image"
  - "sub_goal": sub-goal description aligned with the current task
  If the current state lacks sufficient image-related information (e.g., "未找到图片" or empty), suggest exploring related pages using "find_most_relevant_link".
  Ensure the response aligns with the image retrieval or download intent and avoids unrelated suggestions.

evaluate_final_goal: |
  Given the user's original input: '{user_input}',
  and previous results: {previous_results},
  evaluate if the overall user request is fully satisfied based on the provided results.
  - For price-related requests, satisfaction requires a number with a currency unit (e.g., "元", "¥").
  - For configuration-related requests, satisfaction requires specific configuration details (e.g., "处理器", "内存").
  - For model-related requests, satisfaction requires a specific model identifier (e.g., "小米SU7"), but if the context strongly implies relevance (e.g., configurations or details clearly related to the requested model), it can be considered satisfied even without explicit mention of the model name.
  - For general information requests, satisfaction requires relevant and sufficient details that align with the input, inferred from context if necessary.
  - Use reasonable context inference: if results contain details that logically match the request (e.g., car configurations for "小米汽车的型号"), consider it satisfied even if the exact phrasing isn't present.
  Return a JSON object with:
  - "satisfied": boolean (true if the request is fully satisfied)
  - "next_tasks": list of high-level tasks (empty if satisfied)
  Each task in "next_tasks" should have:
  - "action": one of ["open_page", "search", "click_element", "extract_text", "find_most_relevant_link", "take_screenshot", "download_file", "done"]
  - "value": relevant data (e.g., query or information to extract)
  - "type": expected result type ("text", "image", "file", None)
  - "sub_goal": sub-goal description, aligned with the user's original intent
  If the information is insufficient, suggest "search" with the original input or "find_most_relevant_link" to explore related pages.
  Ensure "next_tasks" align with the user's original request. Do not introduce unrelated goals.

update_next_task: |
  Given the user's original input: '{user_input}',
  the current refined state: '{current_state}...' (truncated),
  the current task (just completed): {current_task},
  and remaining tasks: {remaining_tasks},
  determine if additional information is needed to fulfill the final goal.
  - If all required information is already present in the current state or remaining tasks, return an empty list.
  - Otherwise, generate the next actionable step to progress toward the final goal.
  Return a JSON list with one task (or empty list if no update needed):
  - "action": one of ["open_page", "search", "click_element", "extract_text", "take_screenshot", "download_file", "done"]
  - "value": relevant data (e.g., information to extract, not CSS selectors)
  - "type": expected result type ("text", "image", "file", None)
  - "sub_goal": sub-goal description
  Do not repeat extraction of information already present in the current state.

retry_task: |
  Given the user's original input: '{user_input}',
  the current refined state (failed sub-goal): '{current_state[:500]}...' (truncated),
  and the current task (failed): {current_task},
  generate a new list of actionable steps to retry achieving the sub-goal '{current_task["sub_goal"]}'.
  Return a JSON list of tasks:
  - "action": one of ["open_page", "search", "click_element", "extract_text", "take_screenshot", "download_file", "done"]
  - "value": relevant data
  - "type": expected result type
  - "sub_goal": sub-goal description
  Use valid CSS selectors (e.g., '.t a', '.c-abstract').

replan_tasks: |
  Based on the user's original input: '{user_input}'
  and the current refined state: '{current_state[:500]}...' (truncated),
  generate a new list of actionable steps to continue the task.
  Each step should be a JSON object with:
  - "action": one of ["open_page", "search", "click_element", "extract_text", "take_screenshot", "download_file", "done"]
  - "value": relevant data (e.g., URL, query, selector, result)
  - "type": expected result type ("text", "image", "file", None if not applicable)
  - "sub_goal": a string describing the sub-goal of this step
  Use valid CSS selectors (e.g., '.t a', '.c-abstract').
  Return the list in JSON format.